# Guided Exploration No. 3
# Todd Weaver
# Summer 2020

# We will need the **Python random library** to generate a random number.
import random

# This code will declare an empty list named possible_names. This will be used to store all of the rap names from the rap-names.txt file.
possible_names = []

# This code will be used to open a new file named **rap-names-output.txt**. It will store the names that are generated by your code.
outputFile = open('rap-names-output.txt', 'w')

# This code does a few things. It used something that you have not seen in Python yet, which is the “**with**” keyword.  All of the “stuff” to do is indented below the with statement which ends with a “**:**”.
with open('rap-names.txt', 'r') as dataFile:
    # Note that this statement opens the **rap-names.txt** for read access. It then assigns a “**handle**” to the file named “**dataFile**”, which is a variable. It tells Python to open the file and then with that file, do stuff.
    for name in dataFile:
        # This for loop is going to iterate through each line in the **rap-names.txt** file, one line at a time.

        # During each iteration of the loop, it reads in a line from the **rap-names.txt** file and then strips off the **invisible line-feed** that’s at the end of each line. This is done using the **.rstrip()** string method.

        # The name is then appended to the **possible_names** list. This list will be used in another part of the code to randomly pick list elements from to build the rap name.
        possible_names.append(name.rstrip())

    # This code needs to NOT be within the for or with statements. It needs to be fully outdented.
    # This code will prompt the user for the number of rap names to generate
    count = int(input('How many rap names would you like to create? '))
    #  along with how many parts should be part of the entire rap name.
    parts = int(input('How many parts should the name contain? '))

# This code is going to use a counted loop to generate the total number of rap names the user wants to generate. What needs to happen here is that the code needs to generate a random number so it can get the rap name from the **possible_names** list. The **random.randint()** method needs a to generate this number from 0 to the length of the **possible_names** list and then subtract one from it. This is because Python lists start at 0. It will then use that random number to get a name from the possible_names list and append it to the **name_parts** list.
for i in range(count):
    # Notice that a new empty list is being declared within the loop. This is the list that will hold the rap name parts.
    name_parts = []
    # COMMENT THIS CODE
    for j in range(parts):
        # The next counted loop will iterate for the number of rap names that the user wants as part of the names. Each time it iterates it will randomly select a names from the **possible_names** list and append it to the **name_parts** list. Notice the code inside of the **.append()** method. There are two parameters. Here is the code that’s inside of the **.append()** method: **possible_names[random.randint(0, len(possible_names)-1)]**.
        name_parts.append(possible_names[random.randint(0, len(possible_names)-1)])

    # Make sure that it lines up with the for loop above it. It’s only going to write out a name after the parts of it have been generated. Again, it needs to align with the **for j in range(parts)**. This code is going to take the handle to the file where we are going to write out the generated rap names too. Note that within the **.write()** method is the code **f"{' '.join(name_parts)}\n”**. This code will take the **name_parts** list contents and glue them together with a space. That’s a space between the ' ‘. A new line character (\n) is added to the string. Note the use of an f string to build the completed rap name that will be written to the output file.
    outputFile.write(f"{' '.join(name_parts)}\n")
    # Note that one line writes it to the output file and the other displays it in the terminal within VS Code.
    print(f"{' '.join(name_parts)}")

# This line will close the output file using the **.close()** file method.
outputFile.close()
